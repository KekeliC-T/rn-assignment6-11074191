# README

## Expo React Native App

### Overview

This project is an Expo React Native app designed to showcase a product catalog and a shopping cart functionality. The app consists of two main screens:

- **HomeScreen**: Displays a list of available products with the ability to add them to the cart.
- **CartScreen**: Displays items added to the cart with the option to remove them.

### Design Choices

1. **UI Design**: The app's design follows a clean, minimalistic style inspired by modern e-commerce applications. The HomeScreen displays products in a two-column grid layout, while the CartScreen lists the selected items in a vertical layout. Both screens feature a header with navigation options.

2. **Navigation**: The app uses React Navigation's stack navigator to handle navigation between the HomeScreen and CartScreen. This allows for easy transition between viewing products and managing the cart.

3. **Local Storage**: The app uses `AsyncStorage` to persist cart data locally on the device. This ensures that the cart contents are saved even if the app is closed or the device is restarted.

### Implementation

#### HomeScreen

- **Header**: The header includes a menu button, the app logo, and icons for search and accessing the cart.
- **Product List**: Products are displayed in a two-column grid using `FlatList`. Each product card includes an image, name, description, price, and an "Add to Cart" button.
- **Styling**: Custom styles are used to align elements and ensure a consistent look and feel across devices.

#### CartScreen

- **Header**: The header includes the app logo and a search icon.
- **Cart Items**: Items in the cart are displayed in a vertical list using `FlatList`. Each item card includes an image, name, description, price, and a "Remove from Cart" button.
- **Styling**: Custom styles are used to match the HomeScreen design, with a focus on readability and usability.

### Data Storage

- **AsyncStorage**: Used to store the cart data. When items are added or removed from the cart, the changes are saved to `AsyncStorage`. On app startup, the cart data is loaded from `AsyncStorage` to ensure continuity.

#### Example Code for Data Storage

```javascript
// Adding item to cart
const addToCart = async (product) => {
  const newCart = [...cart, product];
  setCart(newCart);
  await AsyncStorage.setItem("cart", JSON.stringify(newCart));
};

// Loading cart data
useEffect(() => {
  const loadCart = async () => {
    const cartData = await AsyncStorage.getItem("cart");
    if (cartData) {
      setCart(JSON.parse(cartData));
    }
  };
  loadCart();
}, []);
```

### Screenshots

![HomeScreen](\HomeScreenshot.jpg)
![CartScreen](\CartScreenshot.jpg)

### How to Run

1. **Install Expo CLI**:
   ```bash
   npm install -g expo-cli
   ```
2. **Install Project Dependencies**:
   ```bash
   npm install
   ```
3. **Start the Development Server**:
   ```bash
   expo start
   ```
4. **View the App**: Use the Expo Go app on your device or an emulator to scan the QR code generated by the Expo development server.

### Assets

Ensure the following assets are placed in the `assets` directory:

- `add_circle.png`
- `dress1.png` to `dress7.png`
- `Filter.png`
- `Listview.png`
- `Logo.png`
- `Menu.png`
- `remove.png`
- `Search.png`
- `shoppingBag.png`

### Future Improvements

- **Enhance Styling**: Add more detailed styling to match specific brand guidelines.
- **Additional Features**: Implement sorting and filtering of products, user authentication, and a complete checkout process.
- **Backend Integration**: Connect the app to a backend service for dynamic product data and order management.

This project demonstrates a simple yet effective implementation of a product catalog and cart functionality in a React Native app using Expo.
